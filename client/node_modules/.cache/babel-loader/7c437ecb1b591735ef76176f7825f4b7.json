{"ast":null,"code":"import { CREATE_PRODUCT, GET_PRODUCTS, PRODUCTS_FAIL, GET_PRODUCT, REMOVE_PRODUCT, FILTER_BY_CATEGORY, CLEAR_CURRENT_FILTER, FILTER_BY_RATING, RATE_PRODUCT, SEARCH_PRODUCTS } from '../types';\nexport default ((state, action) => {\n  switch (action.type) {\n    case CREATE_PRODUCT:\n      return { ...state,\n        loading: false,\n        error: null,\n        product: action.payload\n      };\n\n    case GET_PRODUCTS:\n      return { ...state,\n        loading: false,\n        error: null,\n        products: action.payload\n      };\n\n    case GET_PRODUCT:\n      return { ...state,\n        product: state.products.filter(product => product._id === action.payload)[0],\n        loading: false\n      };\n\n    case REMOVE_PRODUCT:\n      return { ...state,\n        product: null,\n        loading: true\n      };\n\n    case PRODUCTS_FAIL:\n      return { ...state,\n        products: [],\n        error: action.payload,\n        loading: false\n      };\n\n    case FILTER_BY_CATEGORY:\n      return { ...state,\n        filtered: state.products.filter(item => item.category === action.payload)\n      };\n\n    case FILTER_BY_RATING:\n      return { ...state,\n        filtered: state.products.filter(item => item.averageRating >= action.payload)\n      };\n\n    case SEARCH_PRODUCTS:\n      return { ...state,\n        filtered: state.products.filter(product => {\n          const regex = new RegExp(`${action.payload}`, 'gi');\n          return contact.name.match(regex) || contact.email.match(regex);\n        })\n      };\n\n    case CLEAR_CURRENT_FILTER:\n      return { ...state,\n        filtered: []\n      };\n\n    case RATE_PRODUCT:\n      return { ...state\n      };\n\n    default:\n      return state;\n  }\n});","map":{"version":3,"sources":["C:/Users/Evalds/Documents/Portfolio_1/client/src/context/products/productReducer.js"],"names":["CREATE_PRODUCT","GET_PRODUCTS","PRODUCTS_FAIL","GET_PRODUCT","REMOVE_PRODUCT","FILTER_BY_CATEGORY","CLEAR_CURRENT_FILTER","FILTER_BY_RATING","RATE_PRODUCT","SEARCH_PRODUCTS","state","action","type","loading","error","product","payload","products","filter","_id","filtered","item","category","averageRating","regex","RegExp","contact","name","match","email"],"mappings":"AAAA,SACEA,cADF,EAEEC,YAFF,EAGEC,aAHF,EAIEC,WAJF,EAKEC,cALF,EAMEC,kBANF,EAOEC,oBAPF,EAQEC,gBARF,EASEC,YATF,EAUEC,eAVF,QAWO,UAXP;AAaA,gBAAe,CAACC,KAAD,EAAQC,MAAR,KAAmB;AAChC,UAAQA,MAAM,CAACC,IAAf;AACE,SAAKZ,cAAL;AACE,aAAO,EACL,GAAGU,KADE;AAELG,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAE,IAHF;AAILC,QAAAA,OAAO,EAAEJ,MAAM,CAACK;AAJX,OAAP;;AAMF,SAAKf,YAAL;AACE,aAAO,EACL,GAAGS,KADE;AAELG,QAAAA,OAAO,EAAE,KAFJ;AAGLC,QAAAA,KAAK,EAAE,IAHF;AAILG,QAAAA,QAAQ,EAAEN,MAAM,CAACK;AAJZ,OAAP;;AAMF,SAAKb,WAAL;AACE,aAAO,EACL,GAAGO,KADE;AAELK,QAAAA,OAAO,EAAEL,KAAK,CAACO,QAAN,CAAeC,MAAf,CACNH,OAAD,IAAaA,OAAO,CAACI,GAAR,KAAgBR,MAAM,CAACK,OAD7B,EAEP,CAFO,CAFJ;AAKLH,QAAAA,OAAO,EAAE;AALJ,OAAP;;AAOF,SAAKT,cAAL;AACE,aAAO,EACL,GAAGM,KADE;AAELK,QAAAA,OAAO,EAAE,IAFJ;AAGLF,QAAAA,OAAO,EAAE;AAHJ,OAAP;;AAKF,SAAKX,aAAL;AACE,aAAO,EAAE,GAAGQ,KAAL;AAAYO,QAAAA,QAAQ,EAAE,EAAtB;AAA0BH,QAAAA,KAAK,EAAEH,MAAM,CAACK,OAAxC;AAAiDH,QAAAA,OAAO,EAAE;AAA1D,OAAP;;AACF,SAAKR,kBAAL;AACE,aAAO,EACL,GAAGK,KADE;AAELU,QAAAA,QAAQ,EAAEV,KAAK,CAACO,QAAN,CAAeC,MAAf,CACPG,IAAD,IAAUA,IAAI,CAACC,QAAL,KAAkBX,MAAM,CAACK,OAD3B;AAFL,OAAP;;AAMF,SAAKT,gBAAL;AACE,aAAO,EACL,GAAGG,KADE;AAELU,QAAAA,QAAQ,EAAEV,KAAK,CAACO,QAAN,CAAeC,MAAf,CACPG,IAAD,IAAUA,IAAI,CAACE,aAAL,IAAsBZ,MAAM,CAACK,OAD/B;AAFL,OAAP;;AAMF,SAAKP,eAAL;AACE,aAAO,EACL,GAAGC,KADE;AAELU,QAAAA,QAAQ,EAAEV,KAAK,CAACO,QAAN,CAAeC,MAAf,CAAuBH,OAAD,IAAa;AAC3C,gBAAMS,KAAK,GAAG,IAAIC,MAAJ,CAAY,GAAEd,MAAM,CAACK,OAAQ,EAA7B,EAAgC,IAAhC,CAAd;AACA,iBAAOU,OAAO,CAACC,IAAR,CAAaC,KAAb,CAAmBJ,KAAnB,KAA6BE,OAAO,CAACG,KAAR,CAAcD,KAAd,CAAoBJ,KAApB,CAApC;AACD,SAHS;AAFL,OAAP;;AAOF,SAAKlB,oBAAL;AACE,aAAO,EAAE,GAAGI,KAAL;AAAYU,QAAAA,QAAQ,EAAE;AAAtB,OAAP;;AACF,SAAKZ,YAAL;AACE,aAAO,EACL,GAAGE;AADE,OAAP;;AAGF;AACE,aAAOA,KAAP;AA5DJ;AA8DD,CA/DD","sourcesContent":["import {\r\n  CREATE_PRODUCT,\r\n  GET_PRODUCTS,\r\n  PRODUCTS_FAIL,\r\n  GET_PRODUCT,\r\n  REMOVE_PRODUCT,\r\n  FILTER_BY_CATEGORY,\r\n  CLEAR_CURRENT_FILTER,\r\n  FILTER_BY_RATING,\r\n  RATE_PRODUCT,\r\n  SEARCH_PRODUCTS\r\n} from '../types';\r\n\r\nexport default (state, action) => {\r\n  switch (action.type) {\r\n    case CREATE_PRODUCT:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        product: action.payload,\r\n      };\r\n    case GET_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        loading: false,\r\n        error: null,\r\n        products: action.payload,\r\n      };\r\n    case GET_PRODUCT:\r\n      return {\r\n        ...state,\r\n        product: state.products.filter(\r\n          (product) => product._id === action.payload\r\n        )[0],\r\n        loading: false,\r\n      };\r\n    case REMOVE_PRODUCT:\r\n      return {\r\n        ...state,\r\n        product: null,\r\n        loading: true,\r\n      };\r\n    case PRODUCTS_FAIL:\r\n      return { ...state, products: [], error: action.payload, loading: false };\r\n    case FILTER_BY_CATEGORY:\r\n      return {\r\n        ...state,\r\n        filtered: state.products.filter(\r\n          (item) => item.category === action.payload\r\n        ),\r\n      };\r\n    case FILTER_BY_RATING:\r\n      return {\r\n        ...state,\r\n        filtered: state.products.filter(\r\n          (item) => item.averageRating >= action.payload\r\n        ),\r\n      };\r\n    case SEARCH_PRODUCTS:\r\n      return {\r\n        ...state,\r\n        filtered: state.products.filter((product) => {\r\n          const regex = new RegExp(`${action.payload}`, 'gi');\r\n          return contact.name.match(regex) || contact.email.match(regex);\r\n        }),\r\n      };\r\n    case CLEAR_CURRENT_FILTER:\r\n      return { ...state, filtered: [] };\r\n    case RATE_PRODUCT:\r\n      return {\r\n        ...state,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n"]},"metadata":{},"sourceType":"module"}