{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evalds\\\\Documents\\\\Portfolio_1\\\\client\\\\src\\\\components\\\\basket\\\\components\\\\payment\\\\Form.js\";\nimport { useState } from 'react';\nimport React from 'react';\nimport { CardNumberElement, CardExpiryElement, CardCvcElement, useStripe, useElements } from '@stripe/react-stripe-js';\n\nconst CheckoutForm = ({\n  price,\n  onSuccessfulCheckout\n}) => {\n  const [isProcessing, setProcessingTo] = useState(false);\n  const [checkoutError, setCheckoutError] = useState();\n  const stripe = useStripe();\n  const elements = useElements(); // TIP\n  // use the cardElements onChange prop to add a handler\n  // for setting any errors:\n\n  const handleCardDetailsChange = ev => {\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\n  };\n\n  const handleFormSubmit = async ev => {}; // Learning\n  // A common ask/bug that users run into is:\n  // How do you change the color of the card element input text?\n  // How do you change the font-size of the card element input text?\n  // How do you change the placeholder color?\n  // The answer to all of the above is to use the `style` option.\n  // It's common to hear users confused why the card element appears impervious\n  // to all their styles. No matter what classes they add to the parent element\n  // nothing within the card element seems to change. The reason for this is that\n  // the card element is housed within an iframe and:\n  // > styles do not cascade from a parent window down into its iframes\n\n\n  const iframeStyles = {\n    base: {\n      color: '#fff',\n      fontSize: '16px',\n      iconColor: '#fff',\n      '::placeholder': {\n        color: '#87bbfd'\n      }\n    },\n    invalid: {\n      iconColor: '#FFC7EE',\n      color: '#FFC7EE'\n    },\n    complete: {\n      iconColor: '#cbf4c9'\n    }\n  };\n  const cardElementOpts = {\n    iconStyle: 'solid',\n    style: iframeStyles,\n    hidePostalCode: true\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    onSubmit: handleFormSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(CardCvcElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardExpiryElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(CardNumberElement, {\n    options: cardElementOpts,\n    onChange: handleCardDetailsChange,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }\n  }));\n};\n\nexport default CheckoutForm;","map":{"version":3,"sources":["C:/Users/Evalds/Documents/Portfolio_1/client/src/components/basket/components/payment/Form.js"],"names":["useState","React","CardNumberElement","CardExpiryElement","CardCvcElement","useStripe","useElements","CheckoutForm","price","onSuccessfulCheckout","isProcessing","setProcessingTo","checkoutError","setCheckoutError","stripe","elements","handleCardDetailsChange","ev","error","message","handleFormSubmit","iframeStyles","base","color","fontSize","iconColor","invalid","complete","cardElementOpts","iconStyle","style","hidePostalCode"],"mappings":";AAAA,SAASA,QAAT,QAAyB,OAAzB;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,SACEC,iBADF,EAEEC,iBAFF,EAGEC,cAHF,EAIEC,SAJF,EAKEC,WALF,QAMO,yBANP;;AAQA,MAAMC,YAAY,GAAG,CAAC;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAD,KAAqC;AACxD,QAAM,CAACC,YAAD,EAAeC,eAAf,IAAkCX,QAAQ,CAAC,KAAD,CAAhD;AACA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,EAAlD;AAEA,QAAMc,MAAM,GAAGT,SAAS,EAAxB;AACA,QAAMU,QAAQ,GAAGT,WAAW,EAA5B,CALwD,CAOxD;AACA;AACA;;AAEA,QAAMU,uBAAuB,GAAIC,EAAD,IAAQ;AACtCA,IAAAA,EAAE,CAACC,KAAH,GAAWL,gBAAgB,CAACI,EAAE,CAACC,KAAH,CAASC,OAAV,CAA3B,GAAgDN,gBAAgB,EAAhE;AACD,GAFD;;AAIA,QAAMO,gBAAgB,GAAG,MAAOH,EAAP,IAAc,CAAE,CAAzC,CAfwD,CAiBxD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,QAAMI,YAAY,GAAG;AACnBC,IAAAA,IAAI,EAAE;AACJC,MAAAA,KAAK,EAAE,MADH;AAEJC,MAAAA,QAAQ,EAAE,MAFN;AAGJC,MAAAA,SAAS,EAAE,MAHP;AAIJ,uBAAiB;AACfF,QAAAA,KAAK,EAAE;AADQ;AAJb,KADa;AASnBG,IAAAA,OAAO,EAAE;AACPD,MAAAA,SAAS,EAAE,SADJ;AAEPF,MAAAA,KAAK,EAAE;AAFA,KATU;AAanBI,IAAAA,QAAQ,EAAE;AACRF,MAAAA,SAAS,EAAE;AADH;AAbS,GAArB;AAkBA,QAAMG,eAAe,GAAG;AACtBC,IAAAA,SAAS,EAAE,OADW;AAEtBC,IAAAA,KAAK,EAAET,YAFe;AAGtBU,IAAAA,cAAc,EAAE;AAHM,GAAxB;AAMA,sBACE;AAAM,IAAA,QAAQ,EAAEX,gBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBACE,oBAAC,cAAD;AACE,IAAA,OAAO,EAAEQ,eADX;AAEE,IAAA,QAAQ,EAAEZ,uBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,eAKE,oBAAC,iBAAD;AACE,IAAA,OAAO,EAAEY,eADX;AAEE,IAAA,QAAQ,EAAEZ,uBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALF,eASE,oBAAC,iBAAD;AACE,IAAA,OAAO,EAAEY,eADX;AAEE,IAAA,QAAQ,EAAEZ,uBAFZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IATF,CADF;AAgBD,CArED;;AAuEA,eAAeT,YAAf","sourcesContent":["import { useState } from 'react';\r\nimport React from 'react';\r\nimport {\r\n  CardNumberElement,\r\n  CardExpiryElement,\r\n  CardCvcElement,\r\n  useStripe,\r\n  useElements,\r\n} from '@stripe/react-stripe-js';\r\n\r\nconst CheckoutForm = ({ price, onSuccessfulCheckout }) => {\r\n  const [isProcessing, setProcessingTo] = useState(false);\r\n  const [checkoutError, setCheckoutError] = useState();\r\n\r\n  const stripe = useStripe();\r\n  const elements = useElements();\r\n\r\n  // TIP\r\n  // use the cardElements onChange prop to add a handler\r\n  // for setting any errors:\r\n\r\n  const handleCardDetailsChange = (ev) => {\r\n    ev.error ? setCheckoutError(ev.error.message) : setCheckoutError();\r\n  };\r\n\r\n  const handleFormSubmit = async (ev) => {};\r\n\r\n  // Learning\r\n  // A common ask/bug that users run into is:\r\n  // How do you change the color of the card element input text?\r\n  // How do you change the font-size of the card element input text?\r\n  // How do you change the placeholder color?\r\n  // The answer to all of the above is to use the `style` option.\r\n  // It's common to hear users confused why the card element appears impervious\r\n  // to all their styles. No matter what classes they add to the parent element\r\n  // nothing within the card element seems to change. The reason for this is that\r\n  // the card element is housed within an iframe and:\r\n  // > styles do not cascade from a parent window down into its iframes\r\n\r\n  const iframeStyles = {\r\n    base: {\r\n      color: '#fff',\r\n      fontSize: '16px',\r\n      iconColor: '#fff',\r\n      '::placeholder': {\r\n        color: '#87bbfd',\r\n      },\r\n    },\r\n    invalid: {\r\n      iconColor: '#FFC7EE',\r\n      color: '#FFC7EE',\r\n    },\r\n    complete: {\r\n      iconColor: '#cbf4c9',\r\n    },\r\n  };\r\n\r\n  const cardElementOpts = {\r\n    iconStyle: 'solid',\r\n    style: iframeStyles,\r\n    hidePostalCode: true,\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleFormSubmit}>\r\n      <CardCvcElement\r\n        options={cardElementOpts}\r\n        onChange={handleCardDetailsChange}\r\n      />\r\n      <CardExpiryElement\r\n        options={cardElementOpts}\r\n        onChange={handleCardDetailsChange}\r\n      />\r\n      <CardNumberElement\r\n        options={cardElementOpts}\r\n        onChange={handleCardDetailsChange}\r\n      />\r\n    </form>\r\n  );\r\n};\r\n\r\nexport default CheckoutForm;\r\n"]},"metadata":{},"sourceType":"module"}