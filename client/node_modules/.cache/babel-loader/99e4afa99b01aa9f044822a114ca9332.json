{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Evalds\\\\Documents\\\\Portfolio_1\\\\client\\\\src\\\\components\\\\basket\\\\components\\\\payment\\\\Form.js\";\nimport React from 'react';\nimport { CardElement, useStripe, useElements, CardNumberElement, CardExpiryElement } from '@stripe/react-stripe-js';\nimport { useEffect } from 'react';\n\nfunction Form() {\n  const CARD_OPTIONS = {\n    iconStyle: 'solid',\n    style: {\n      base: {\n        iconColor: '#c4f0ff',\n        color: '#fff',\n        fontWeight: 500,\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\n        fontSize: '16px',\n        fontSmoothing: 'antialiased',\n        ':-webkit-autofill': {\n          color: '#fce883'\n        },\n        '::placeholder': {\n          color: '#87bbfd'\n        }\n      },\n      invalid: {\n        iconColor: '#ffc7ee',\n        color: '#ffc7ee'\n      }\n    }\n  };\n  const stripe = useStripe();\n  var elements = stripe.elements();\n  useEffect(() => {\n    var card = elements.create('card', {\n      iconStyle: 'solid',\n      style: {\n        base: {\n          iconColor: '#8898AA',\n          //color: 'white',\n          lineHeight: '36px',\n          fontWeight: 300,\n          fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\n          fontSize: '19px',\n          '::placeholder': {\n            color: '#8898AA'\n          }\n        },\n        invalid: {\n          iconColor: '#e85746',\n          color: '#e85746'\n        }\n      },\n      classes: {\n        focus: 'is-focused',\n        empty: 'is-empty'\n      }\n    });\n    card.mount('#card-element');\n    var inputs = document.querySelectorAll('input.field');\n    Array.prototype.forEach.call(inputs, function (input) {\n      input.addEventListener('focus', function () {\n        input.classList.add('is-focused');\n      });\n      input.addEventListener('blur', function () {\n        input.classList.remove('is-focused');\n      });\n      input.addEventListener('keyup', function () {\n        if (input.value.length === 0) {\n          input.classList.add('is-empty');\n        } else {\n          input.classList.remove('is-empty');\n        }\n      });\n    });\n\n    function setOutcome(result) {\n      var successElement = document.querySelector('.success');\n      var errorElement = document.querySelector('.error');\n      successElement.classList.remove('visible');\n      errorElement.classList.remove('visible');\n\n      if (result.token) {\n        // Use the token to create a charge or a customer\n        // https://stripe.com/docs/charges\n        successElement.querySelector('.token').textContent = result.token.id;\n        successElement.classList.add('visible');\n      } else if (result.error) {\n        errorElement.textContent = result.error.message;\n        errorElement.classList.add('visible');\n      }\n    }\n\n    card.on('change', function (event) {\n      setOutcome(event);\n    });\n    document.querySelector('form').addEventListener('submit', function (e) {\n      e.preventDefault();\n      var form = document.querySelector('form');\n      var extraDetails = {\n        name: form.querySelector('input[name=cardholder-name]').value\n      };\n      stripe.createToken(card, extraDetails).then(setOutcome);\n    });\n  }, []);\n\n  const handleSubmit = async event => {\n    // Block native form submission.\n    event.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js has not loaded yet. Make sure to disable\n      // form submission until Stripe.js has loaded.\n      return;\n    } // Get a reference to a mounted CardElement. Elements knows how\n    // to find your CardElement because there can only ever be one of\n    // each type of element.\n\n\n    const cardElement = elements.getElement(CardElement); // Use your card Element with other Stripe.js APIs\n\n    const {\n      error,\n      paymentMethod\n    } = await stripe.createPaymentMethod({\n      type: 'card',\n      card: cardElement\n    });\n\n    if (error) {\n      console.log('[error]', error);\n    } else {\n      console.log('[PaymentMethod]', paymentMethod);\n    }\n  };\n\n  return /*#__PURE__*/React.createElement(\"form\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    name: \"cardholder-name\",\n    class: \"field is-empty\",\n    placeholder: \"Jane Doe\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 145,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 151,\n      columnNumber: 11\n    }\n  }, \"Name\"))), /*#__PURE__*/React.createElement(\"label\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    id: \"card-element\",\n    class: \"field is-empty\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 156,\n      columnNumber: 9\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 157,\n      columnNumber: 11\n    }\n  }, \"Card\"))), /*#__PURE__*/React.createElement(\"button\", {\n    type: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160,\n      columnNumber: 7\n    }\n  }, \"Pay $25\"), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"outcome\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 161,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"div\", {\n    class: \"error\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162,\n      columnNumber: 9\n    }\n  }), /*#__PURE__*/React.createElement(\"div\", {\n    class: \"success\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 163,\n      columnNumber: 9\n    }\n  }, \"Success! Your Stripe token is \", /*#__PURE__*/React.createElement(\"span\", {\n    class: \"token\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 41\n    }\n  }))));\n}\n\nexport default Form;","map":{"version":3,"sources":["C:/Users/Evalds/Documents/Portfolio_1/client/src/components/basket/components/payment/Form.js"],"names":["React","CardElement","useStripe","useElements","CardNumberElement","CardExpiryElement","useEffect","Form","CARD_OPTIONS","iconStyle","style","base","iconColor","color","fontWeight","fontFamily","fontSize","fontSmoothing","invalid","stripe","elements","card","create","lineHeight","classes","focus","empty","mount","inputs","document","querySelectorAll","Array","prototype","forEach","call","input","addEventListener","classList","add","remove","value","length","setOutcome","result","successElement","querySelector","errorElement","token","textContent","id","error","message","on","event","e","preventDefault","form","extraDetails","name","createToken","then","handleSubmit","cardElement","getElement","paymentMethod","createPaymentMethod","type","console","log"],"mappings":"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","sourcesContent":["import React from 'react';\r\nimport {\r\n  CardElement,\r\n  useStripe,\r\n  useElements,\r\n  CardNumberElement,\r\n  CardExpiryElement,\r\n} from '@stripe/react-stripe-js';\r\nimport { useEffect } from 'react';\r\n\r\nfunction Form() {\r\n  const CARD_OPTIONS = {\r\n    iconStyle: 'solid',\r\n    style: {\r\n      base: {\r\n        iconColor: '#c4f0ff',\r\n        color: '#fff',\r\n        fontWeight: 500,\r\n        fontFamily: 'Roboto, Open Sans, Segoe UI, sans-serif',\r\n        fontSize: '16px',\r\n        fontSmoothing: 'antialiased',\r\n        ':-webkit-autofill': {\r\n          color: '#fce883',\r\n        },\r\n        '::placeholder': {\r\n          color: '#87bbfd',\r\n        },\r\n      },\r\n      invalid: {\r\n        iconColor: '#ffc7ee',\r\n        color: '#ffc7ee',\r\n      },\r\n    },\r\n  };\r\n  const stripe = useStripe();\r\n\r\n  var elements = stripe.elements();\r\n  useEffect(() => {\r\n    var card = elements.create('card', {\r\n      iconStyle: 'solid',\r\n      style: {\r\n        base: {\r\n          iconColor: '#8898AA',\r\n          //color: 'white',\r\n          lineHeight: '36px',\r\n          fontWeight: 300,\r\n          fontFamily: '\"Helvetica Neue\", Helvetica, sans-serif',\r\n          fontSize: '19px',\r\n\r\n          '::placeholder': {\r\n            color: '#8898AA',\r\n          },\r\n        },\r\n        invalid: {\r\n          iconColor: '#e85746',\r\n          color: '#e85746',\r\n        },\r\n      },\r\n      classes: {\r\n        focus: 'is-focused',\r\n        empty: 'is-empty',\r\n      },\r\n    });\r\n    card.mount('#card-element');\r\n\r\n    var inputs = document.querySelectorAll('input.field');\r\n    Array.prototype.forEach.call(inputs, function (input) {\r\n      input.addEventListener('focus', function () {\r\n        input.classList.add('is-focused');\r\n      });\r\n      input.addEventListener('blur', function () {\r\n        input.classList.remove('is-focused');\r\n      });\r\n      input.addEventListener('keyup', function () {\r\n        if (input.value.length === 0) {\r\n          input.classList.add('is-empty');\r\n        } else {\r\n          input.classList.remove('is-empty');\r\n        }\r\n      });\r\n    });\r\n\r\n    function setOutcome(result) {\r\n      var successElement = document.querySelector('.success');\r\n      var errorElement = document.querySelector('.error');\r\n      successElement.classList.remove('visible');\r\n      errorElement.classList.remove('visible');\r\n\r\n      if (result.token) {\r\n        // Use the token to create a charge or a customer\r\n        // https://stripe.com/docs/charges\r\n        successElement.querySelector('.token').textContent = result.token.id;\r\n        successElement.classList.add('visible');\r\n      } else if (result.error) {\r\n        errorElement.textContent = result.error.message;\r\n        errorElement.classList.add('visible');\r\n      }\r\n    }\r\n\r\n    card.on('change', function (event) {\r\n      setOutcome(event);\r\n    });\r\n\r\n    document.querySelector('form').addEventListener('submit', function (e) {\r\n      e.preventDefault();\r\n      var form = document.querySelector('form');\r\n      var extraDetails = {\r\n        name: form.querySelector('input[name=cardholder-name]').value,\r\n      };\r\n      stripe.createToken(card, extraDetails).then(setOutcome);\r\n    });\r\n  }, []);\r\n\r\n  const handleSubmit = async (event) => {\r\n    // Block native form submission.\r\n    event.preventDefault();\r\n\r\n    if (!stripe || !elements) {\r\n      // Stripe.js has not loaded yet. Make sure to disable\r\n      // form submission until Stripe.js has loaded.\r\n      return;\r\n    }\r\n\r\n    // Get a reference to a mounted CardElement. Elements knows how\r\n    // to find your CardElement because there can only ever be one of\r\n    // each type of element.\r\n    const cardElement = elements.getElement(CardElement);\r\n\r\n    // Use your card Element with other Stripe.js APIs\r\n    const { error, paymentMethod } = await stripe.createPaymentMethod({\r\n      type: 'card',\r\n      card: cardElement,\r\n    });\r\n\r\n    if (error) {\r\n      console.log('[error]', error);\r\n    } else {\r\n      console.log('[PaymentMethod]', paymentMethod);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <form>\r\n      <label>\r\n        <input\r\n          name=\"cardholder-name\"\r\n          class=\"field is-empty\"\r\n          placeholder=\"Jane Doe\"\r\n        />\r\n        <span>\r\n          <span>Name</span>\r\n        </span>\r\n      </label>\r\n      <label>\r\n        <div id=\"card-element\" class=\"field is-empty\"></div>\r\n        <span>\r\n          <span>Card</span>\r\n        </span>\r\n      </label>\r\n      <button type=\"submit\">Pay $25</button>\r\n      <div class=\"outcome\">\r\n        <div class=\"error\"></div>\r\n        <div class=\"success\">\r\n          Success! Your Stripe token is <span class=\"token\"></span>\r\n        </div>\r\n      </div>\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Form;\r\n"]},"metadata":{},"sourceType":"module"}